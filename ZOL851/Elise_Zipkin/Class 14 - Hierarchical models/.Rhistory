install.packages("R2jags")
library(R2jags)
install.packages("R2jags")
library(R2jags)
library("R2jags")
n <- 16  				# Number of years
a = 40					# Intercept
b = -1.5					# Slope
sigma2 = 25					# Residual variance
x <- 1:16 					# Values of covariate: here, year
eps <- rnorm(n, mean = 0, sd = sqrt(sigma2))	# Draw residuals from normal
y <- a + b*x + eps
plot((x+1989), y, xlab = "Year", las = 1, ylab = "Prop. occupied by Wallcreeper (%)",
cex = 1.2)
sink("linreg.txt")
cat("
model {
# Priors
alpha ~ dnorm(0,0.001) # Note: small precision = huge variance (prec=1/variance)
beta ~ dnorm(0,0.001)
sigma ~ dunif(0, 100)   	# Note: Large variance = Small precision
# Likelihood
tau <- 1/ (sigma * sigma)
for (i in 1:n) {
y[i] ~ dnorm(mu[i], tau)
mu[i] <- alpha + beta*x[i]
}
# Derived quantities
p.decline <- 1-step(beta)	# Probability of decline: step(beta) = if beta >=0; 0 otherwise
}
",fill=TRUE)
sink()
data <- list("x","y", "n")
# Inits function
inits <- function(){ list(alpha=rnorm(1), beta=rnorm(1), sigma = rlnorm(1))}
params <- c("alpha","beta", "p.decline", "sigma")
nc = 3  ;  ni=3500  ;  nb=500  ;  nt=3
out <- jags(data, inits, params, "linreg.txt", n.chains = nc,
n.thin = nt, n.iter = ni, n.burnin = nb, working.directory = getwd())
jagsout <- as.mcmc.list(out$BUGSoutput)
plot(jagsout)
summary(jagsout)
hist(out$BUGSoutput$sims.list$beta,
main = "Posterior distribution \nof Swiss Wallcreeper population trend",
col = "grey", xlab = "Occupancy-based population trend", xlim=c(-3.0,1.0))
abline(v = 0, col = "red")
summary(jagsout)
hist(out$BUGSoutput$sims.list$beta,
main = "Posterior distribution \nof Swiss Wallcreeper population trend",
col = "grey", xlab = "Occupancy-based population trend", xlim=c(-3.0,1.0))
abline(v = 0, col = "red")
hist(out$BUGSoutput$sims.list$beta,
main = "Posterior distribution \nof Swiss Wallcreeper population trend",
col = "grey", xlab = "Occupancy-based population trend", xlim=c(-3.0,1.0))
abline(v = 0, col = "red")
plot((x+1989), y, xlab = "Year", las = 1, ylab = "Prop. occupied by Wallcreeper (%)", cex = 1.2)
abline(lm(y~ I(x+1989)), col = "blue", lwd = 2)
pred.y <- out$BUGSoutput$mean$alpha + out$BUGSoutput$mean$beta * x
points(1990:2005, pred.y, type = "l", col = "red", lwd = 2)
text(1994, 12, labels = "blue - ML; red - MCMC", cex = 1.2)
predictions <-array(dim=c(length(x),length(out$BUGSoutput$sims.list$alpha)))
for(i in 1:length(x)){
predictions[i,]<-out$BUGSoutput$sims.list$alpha+out$BUGSoutput$sims.list$beta*i
}
LPB <-apply(predictions,1,quantile,probs=0.025)#Lowerbound
UPB <-apply(predictions,1,quantile,probs=0.975)#Upperbound
plot((x+1989),y,xlab="Year",las=1,ylab="Prop.occupied(%)",cex=1.2)
points(1990:2005,out$BUGSoutput$mean$alpha+out$BUGSoutput$mean$beta*x,type="l",col="black",
lwd=2)
points(1990:2005,LPB,type="l",col="grey",lwd=2)
points(1990:2005,UPB,type="l",col="grey",lwd=2)
plot((x+1989),y,xlab="Year",las=1,ylab="Prop.occupied(%)",cex=1.2)
points(1990:2005,out$BUGSoutput$mean$alpha+out$BUGSoutput$mean$beta*x,type="l",col="black",
lwd=2)
points(1990:2005,LPB,type="l",col="grey",lwd=2)
points(1990:2005,UPB,type="l",col="grey",lwd=2)
plot((x+1989), y, xlab = "Year", las = 1, ylab = "Prop. occupied by Wallcreeper (%)", cex = 1.2)
abline(lm(y~ I(x+1989)), col = "blue", lwd = 2)
pred.y <- out$BUGSoutput$mean$alpha + out$BUGSoutput$mean$beta * x
points(1990:2005, pred.y, type = "l", col = "red", lwd = 2)
text(1994, 12, labels = "blue - ML; red - MCMC", cex = 1.2)
predictions <-array(dim=c(length(x),length(out$BUGSoutput$sims.list$alpha)))
for(i in 1:length(x)){
predictions[i,]<-out$BUGSoutput$sims.list$alpha+out$BUGSoutput$sims.list$beta*i
}
LPB <-apply(predictions,1,quantile,probs=0.025)#Lowerbound
UPB <-apply(predictions,1,quantile,probs=0.975)#Upperbound
500/3500
jagsout <- as.mcmc.list(out$BUGSoutput)
plot(jagsout)
summary(jagsout)
hist(out$BUGSoutput$sims.list$beta,
main = "Posterior distribution \nof Swiss Wallcreeper population trend",
col = "grey", xlab = "Occupancy-based population trend", xlim=c(-3.0,1.0))
abline(v = 0, col = "red")
library("dlm")
library("KFAS")
library("forecast")
install.packages("dlm")
install.packages("KFAS")
install.packages("forecast")
library("dlm")
library("KFAS")
library("forecast")
fitNile <- StructTS(Nile, "level")
plot(Nile, type = "o")
lines(fitted(fitNile), lty = "dashed", lwd = 2)
lines(tsSmooth(fitNile), lty = "dotted", lwd = 2)
plot(Nile, type = "o")
?Nile
plot(Nile, type = "o")
lines(fitted(fitNile), lty = "dashed", lwd = 2)
lines(tsSmooth(fitNile), lty = "dotted", lwd = 2)
plot(forecast(fitNile, level = c(50, 90), h = 10), xlim = c(1950, 1980))
buildNile <- function(theta) {
dlmModPoly(order = 1, dV = theta[1], dW = theta[2])
}
fit <- dlmMLE(Nile, parm = c(100, 2), buildNile, lower = rep(1e-4, 2))
modNile <- buildNile(fit$par)
smoothNile <- dlmSmooth(Nile, modNile)
modNile <- buildNile(fit$par)
smoothNile <- dlmSmooth(Nile, modNile)
filterNile <- dlmFilter(Nile, modNile)
plot(residuals(filterNile, sd = FALSE), type = "o",
ylab = "Standardized prediction error")
abline(h = 0)
foreNile <- dlmForecast(filterNile, nAhead = 10)
attach(foreNile)
hwidth <- qnorm(0.25, lower = FALSE) * sqrt(unlist(Q))
fore <- cbind(f, as.vector(f) + hwidth %o% c(-1, 1))
rg <- range(c(fore, window(Nile, start = c(1951, 1))))
plot(fore, type = "o", pch = 16, plot.type = "s", lty = c(1, 3, 3),
ylab = "Nile level", xlab = "", xlim = c(1951, 1980), ylim = rg)
lines(window(Nile, start = c(1951, 1)), type = 'o')
lines(window(smoothNile$s, start = c(1951,1)), lty = 5)
abline(v = mean(c(time(f)[1], tail(time(Nile), 1))),
lty = "dashed", col = "darkgrey")
legend("topleft", lty = c(1, 5, 1, 3), pch = c(1, NA, 16, 16), bty = "n",
legend = c("observed level", "smoothed level", "forecasted level",
"50% probability limits"))
detach(foreNile)
lambda <- mean.lambda*sigma2.lambda
n.years <- 25           # Number of years
N1 <- 30                # Initial population size
mean.lambda <- 1.02       # Mean annual population growth rate
sigma2.lambda <- 0.02     # Process (temporal) variation of the growth rate
sigma2.y <-  25         # Variance of the observation error
N <- 1:25
N[1] <- 30
lambda <- mean.lambda*sigma2.lambda
N1*lambda
for(i in N):
N1*lambda
for(i in length(N)):
N1*lambda
for(i in length(N)):
N1*lambda
lambda <- rnorm(mean.lambda, sigma2.lambda)
lambda <- rnorm(n.years, mean.lambda, sigma2.lambda)
lambda
for(i in (N[2]:N[25])){
pop.size <- N1*lambda
return pop.size
}
for(i in (N[2]:N[25])){
pop.size <- N1*lambda
}
pop.size
for(i in (N[2]:N[25])){
pop.size <- N[i-1]*lambda[i]
}
pop.szie
pop.size
for(i in (N[2]:N[25])){
pop.size <- N[i-1]*lambda[i]
}
pop.size
for(i in (N[2]:length(N)){
for(i in (N[2]:length(N)){
pop.size <- N[i-1]*lambda[i]
}
#population size from N[t-1] and the annual growth rates
for(i in (N[2]:length(N))){
pop.size <- N[i-1]*lambda[i]
}
pop.size
for(i in N[2]:N){
pop.size <- N[i-1]*lambda[i]
}
pop.size
#population size from N[t-1] and the annual growth rates
for(i in N[2]:N[25]){
pop.size <- N[i-1]*lambda[i]
}
pop.size
for(i in N[2]:N[25]){
pop.size <- N[i]*lambda[i]
}
for(i in N[2]:N[25]){
pop.size <- N[i]*lambda[i]
}
pop.size
